---
- name: Fail if host domain name is set improperly
  assert:
    that:
    - libvirt_domain_name | regex_search('^[0-9a-z]([-0-9a-z]*[0-9a-z])?(\.[0-9a-z]([-0-9a-z]*[0-9a-z])?)+$')
  when:
  - configure_network | bool
  - modify_default_network | bool

- name: Install libvirt packages
  dnf:
    name: "{{ libvirt_pkgs }}"
    state: present
  become: true

- name: Add current user to the libvirt group
  user:
    name: "{{ ansible_user_id }}"
    groups: libvirt
    append: true
  become: true

- name: Ensure libvirtd is started
  service:
    name: libvirtd
    state: started
    enabled: true
  become: true

- name: Configure default libvirt network
  block:
  - name: Get libvirt default network config
    virt_net:
      name: default
      command: get_xml
    register: default_net

  - name: debug default_net
    debug:
      var: default_net
    when: enable_debug | bool

  - name: Create libvirt default net xml from data
    copy:
      content: "{{ default_net.get_xml }}"
      dest: /tmp/libvirt_default_net_{{ ansible_hostname }}.xml

  - name: Add Domain to libvirt default net xml
    lineinfile:
      line: "  <domain name='{{ libvirt_domain_name }}' localOnly='yes'/>"
      dest: /tmp/libvirt_default_net_{{ ansible_hostname }}.xml
      regexp: "^  <domain.*/>$"
      insertbefore: '</network>'
    register: net_domain

  - name: debug net_domain
    debug:
      var: net_domain
    when: enable_debug | bool

  - name: stop libvirt default net
    virt_net:
      name: default
      command: destroy
    ignore_errors: true
    when: net_domain.changed

  - name: delete libvirt default net
    virt_net:
      name: default
      command: undefine
    when: net_domain.changed

  - name: Copy remote network xml to ansible control node
    fetch:
      src: /tmp/libvirt_default_net_{{ ansible_hostname }}.xml
      dest: /tmp/libvirt_default_net_{{ ansible_hostname }}.xml
    when: not ansible_connection == "local"

  - name: Configure libvirt default net from xml
    virt_net:
      name: default
      command: define
      xml: "{{ lookup('file', '/tmp/libvirt_default_net_{{ ansible_hostname }}.xml') }}"
    when: net_domain.changed
    notify:
    - start_libvirt_net
  become: true
  when:
  - configure_network | bool
  - modify_default_network | bool

- name: Configure Custom Libvirt Network
  block:
  - name: Change network vars from default values
    set_fact:
      libvirt_network_name: "virt"
      libvirt_network_device: "virt0"
      libvirt_network_subnet: "123"

  - name: Change libvirt domain name from default
    set_fact:
      libvirt_domain_name: "{{ libvirt_network_name }}.local"

  - name: Define new libvirt network
    virt_net:
      command: define
      name: "{{ libvirt_network_name }}"
      xml: "{{ lookup('template', './roles/libvirt/templates/new_network.xml.j2') }}"
    notify: start_libvirt_net
  become: true
  when:
  - configure_network | bool
  - not modify_default_network | bool

- name: Configure and start libvirt network
  block:
  - name: Configure systemd-resolved for libvirt dns resolution
    template:
      src: ./roles/libvirt/templates/dns-libvirt.service.j2
      dest: /etc/systemd/system/dns-libvirt-{{ libvirt_network_device }}.service
    notify: start_dns_libvirt

  - name: Autostart libvirt network
    virt_net:
      autostart: true
      name: "{{ libvirt_network_name }}"
  become: true
  when:
  - configure_network | bool

- name: Pre-configure libvirt default storage pool
  block:
  - name: Check if default pool exists
    virt_pool:
      command: get_xml
      name: default
  rescue:
  - name: Define default storage pool for libvirt
    virt_pool:
      name: default
      command: define
      xml: "{{ lookup('template', './roles/libvirt/templates/libvirt_default_pool.xml.j2') }}"
  - name: Start libvirt default storage pool
    virt_pool:
      name: default
      command: start
  become: true
  when: configure_storage | bool

- name: Configure libvirt default storage pool
  block:
  - name: Create storage pool directory for VMs
    file:
      path: "{{ vm_storage_dir }}"
      owner: qemu
      group: libvirt
      mode: 02770
      state: directory

  - name: Gather contents of new storage pool dir
    find:
      path: "{{ vm_storage_dir }}"
      file_type: file
    register: images_list

  - name: Apply proper permissions to VM images
    file:
      path: "{{ item.path }}"
      owner: qemu
      group: libvirt
      mode: 0770
    with_items: "{{ images_list.files }}"

  - name: Get default storage pool config
    virt_pool:
      name: default
      command: get_xml
    register: default_pool

  - name: Create libvirt default pool from data
    copy:
      content: "{{ default_pool.get_xml }}"
      dest: /tmp/libvirt_default_pool.xml

  - name: Change path in libvirt default pool xml
    lineinfile:
      line: "    <path>{{ vm_storage_dir }}</path>"
      dest: /tmp/libvirt_default_pool.xml
      regexp: '^    <path>.*</path>$'
      insertbefore: '</target>'
    register: storage_path

  - name: debug path_changed
    debug:
      var: storage_path
    when: enable_debug | bool

  - name: stop libvirt default pool
    virt_pool:
      name: default
      command: destroy
    ignore_errors: true
    when: storage_path.changed

  - name: delete libvirt default pool
    virt_pool:
      name: default
      command: undefine
    when: storage_path.changed

  - name: Configure libvirt default pool from xml
    virt_pool:
      name: default
      command: define
      xml: "{{ lookup('file', '/tmp/libvirt_default_pool.xml') }}"
    when: storage_path.changed
    notify:
    - start_default_pool

  - name: Autostart default pool
    virt_pool:
      autostart: true
      name: default
  become: true
  when: configure_storage | bool and
        not 'btrfs' in ansible_mounts | json_query('[?mount == `/home`].fstype')
